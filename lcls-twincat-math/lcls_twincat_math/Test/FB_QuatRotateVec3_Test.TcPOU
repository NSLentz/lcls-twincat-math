<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_QuatRotateVec3_Test" Id="{d86f82e1-ca08-4636-927e-352491bfba5e}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_QuatRotateVec3_Test EXTENDS FB_TestSuite
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
Test0QuatExpectErrorUnchanged();

TestRandInputExpectCorrectResult();
]]></ST>
    </Implementation>
    <Method Name="Test0QuatExpectErrorUnchanged" Id="{708eddf4-7ad9-4827-9fdb-bb5368b1ba8b}">
      <Declaration><![CDATA[
METHOD PRIVATE Test0QuatExpectErrorUnchanged
VAR
    fbQ1 : FB_Quaternion;
    fbV1 : FB_Vec3;

    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0QuatExpectErrorUnchanged');

fbQ1.Set(0, 0, 0, 0);
fbV1.Set(1, 1, 1);
fbV1 := F_QuatRotateVec3(
    iQuat := fbQ1,
    iVec3 := fbV1,
    bError => bError,
    sErrorMsg => sErrorMsg
);

AssertTrue(
    Condition := bError,
    Message := 'Should have had an error.'
);

AssertFalse(
    Condition := sErrorMsg = '',
    Message := 'Should not have empty error message.'
);

AssertEquals_LREAL(
    Expected := 1,
    Actual := fbV1.x,
    Delta := 0.0,
    Message := 'Vector 1 [x] was not the expected value.'
);

AssertEquals_LREAL(
    Expected := 1,
    Actual := fbV1.y,
    Delta := 0.0,
    Message := 'Vector 1 [y] was not the expected value.'
);

AssertEquals_LREAL(
    Expected := 1,
    Actual := fbV1.z,
    Delta := 0.0,
    Message := 'Vector 1 [z] was not the expected value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRandInputExpectCorrectResult" Id="{86aee5ed-e274-4192-8d26-d682a4f0a453}">
      <Declaration><![CDATA[
METHOD PRIVATE TestRandInputExpectCorrectResult
VAR
    fbQ1 : FB_Quaternion;
    fbV1 : FB_Vec3;

    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestRandInputExpectCorrectResult');

//fbQ1.Set(-0.499965221779343, 0.383023912780829, 0.412035378111750, 0.405492550516440);
//fbV1.Set(-0.363780750881015, -0.599272040041946, -0.589588991418034);
fbQ1.Set(1, 0, 1, 0);
fbV1.Set(1, 1, 1);
fbV1 := F_QuatRotateVec3(
    iQuat := fbQ1,
    iVec3 := fbV1,
    bError => bError,
    sErrorMsg => sErrorMsg
);

AssertFalse(
    Condition := bError,
    Message := 'Should not have had an error.'
);

AssertTrue(
    Condition := sErrorMsg = '',
    Message := 'Should have empty error message.'
);

AssertEquals_LREAL(
    Expected := -1,
    Actual := fbV1.x,
    Delta := 1e-10,
    Message := 'Vector 1 [x] was not the expected value.'
);

AssertEquals_LREAL(
    Expected := 1,
    Actual := fbV1.y,
    Delta := 1e-10,
    Message := 'Vector 1 [y] was not the expected value.'
);

AssertEquals_LREAL(
    Expected := 1,
    Actual := fbV1.z,
    Delta := 1e-10,
    Message := 'Vector 1 [z] was not the expected value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>