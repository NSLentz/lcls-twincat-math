<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="F_RotateVec3_1" Id="{9201381c-22ca-4f17-b240-af852ad7524e}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION F_RotateVec3_1 : FB_Vec3
VAR_INPUT
    iVec4 : I_Vec4;
    iVec3 : I_Vec3;
    fAlphaRadians : LREAL; // Euler angle around first rotation axis
    fBetaRadians : LREAL; // Euler angle around second rotation axis
    fGammaRadians : LREAL; // Euler angle around third rotation axis
    sOrder : STRING := 'ZYX'; // Default or invalid input = ZYX.
    // YZY, YXY, ZYZ, ZXZ, XYX, XZX, XYZ, YZX, ZXY, XZY, ZYX, YXZ
END_VAR
VAR
    fbV3 : FB_Vec3;
    fbQr : FB_Quaternion;
    fbQc : FB_Quaternion;
    fbQo : FB_Quaternion;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbQr := F_EulerToQuat(
    fAlphaRadians := fAlphaRadians,
    fBetaRadians := fBetaRadians,
    fGammaRadians := fGammaRadians,
    sOrder := sOrder,
    bFrame := FALSE
);

fbV3.Set(iVec3.x, iVec3.y, iVec3.z);

fbQc := fbQr;
fbQc.MakeConj();

fbQo := F_MulQuat(fbQr, fbV3);
fbQo := F_MulQuat(fbQo, fbQc);

//F_RotateVec3.x := fbQo.x;
//F_RotateVec3.y := fbQo.y;
//F_RotateVec3.z := fbQo.z;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>