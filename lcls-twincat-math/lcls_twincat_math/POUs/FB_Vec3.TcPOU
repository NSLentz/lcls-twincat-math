<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Vec3" Id="{c09dfe87-9fa9-4800-966a-c9fa2f01d9b6}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_Vec3 IMPLEMENTS I_Vec3, I_Quat
VAR
    fx : LREAL;
    fy : LREAL;
    fz : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="AddVec3" Id="{ef14f849-964d-41c6-b93c-957ccd6460f6}">
      <Declaration><![CDATA[
METHOD AddVec3
VAR_INPUT
    iVec3	: I_Vec3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
x := x + iVec3.x;
y := y + iVec3.y;
z := z + iVec3.z;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CrossVec3" Id="{61d300cc-4420-46cd-b758-e15093cacda1}">
      <Declaration><![CDATA[
METHOD CrossVec3
VAR_INPUT
    iVec3	: I_Vec3;
END_VAR
VAR
    fxi : LREAL;
    fyi : LREAL;
    fzi : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fxi := x;
fyi := y;
fzi := z;

x := (fyi * iVec3.z) - (fzi * iVec3.y);
y := (fzi * iVec3.x) - (fxi * iVec3.z);
z := (fxi * iVec3.y) - (fyi * iVec3.x);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DivScalar" Id="{dab15bc3-686a-4a9e-825e-34b647e354d9}">
      <Declaration><![CDATA[
METHOD DivScalar
VAR_INPUT
    fScalar : LREAL;
END_VAR
VAR_OUTPUT
    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bError := FALSE;
sErrorMsg := '';

IF fScalar = 0.0 THEN
    bError := TRUE;
    sErrorMsg := 'Error: attempted division of vector by scalar of 0.';
    RETURN;
END_IF

x := x / fScalar;
y := y / fScalar;
z := z / fScalar;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DotVec3" Id="{96055ecf-9626-4c41-8898-10ce4518584b}">
      <Declaration><![CDATA[
METHOD DotVec3 : LREAL
VAR_INPUT
    iVec3	: I_Vec3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
DotVec3 := (x * iVec3.x) + (y * iVec3.y) + (z * iVec3.z);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EqualsVec3" Id="{eb6b7e2e-801b-46b5-bde4-0b1ff27e10e0}">
      <Declaration><![CDATA[
METHOD EqualsVec3 : BOOL
VAR_INPUT
    iVec3 : I_Vec3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
EqualsVec3 := x = iVec3.x AND
              y = iVec3.y AND
              z = iVec3.z;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNorm" Id="{9a7fc225-e930-434a-aa42-0d79876ee438}">
      <Declaration><![CDATA[
METHOD GetNorm : LREAL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetNorm := SQRT(x*x + y*y + z*z);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNormSq" Id="{56bcaac9-1c9f-4d84-9e44-e20fff1f3cc7}">
      <Declaration><![CDATA[
METHOD GetNormSq : LREAL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetNormSq := x*x + y*y + z*z;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Normalize" Id="{efdb3d81-0dd7-4287-857e-bbecdcf609fc}">
      <Declaration><![CDATA[
METHOD Normalize
VAR_OUTPUT
    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
VAR
    fNorm : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bError := FALSE;
sErrorMsg := '';

fNorm := GetNorm();

IF fNorm = 0.0 THEN
    bError := TRUE;
    sErrorMsg := 'Error: cannot normalize a vector with a norm of 0.';
    RETURN;
END_IF

x := x / fNorm;
y := y / fNorm;
z := z / fNorm;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{46859cf8-2f93-4aad-aa44-e3a03872d507}">
      <Declaration><![CDATA[
METHOD Set
VAR_INPUT
    x : LREAL;
    y : LREAL;
    z : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.x := x;
THIS^.y := y;
THIS^.z := z;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToString" Id="{c35ca60f-311e-4b45-99f0-9b9fae4ea9dd}">
      <Declaration><![CDATA[
METHOD ToString : T_MaxString
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ToString := '(';

ToString := CONCAT(ToString, LREAL_TO_STRING(x));
ToString := CONCAT(ToString, ', ');

ToString := CONCAT(ToString, LREAL_TO_STRING(y));
ToString := CONCAT(ToString, ', ');

ToString := CONCAT(ToString, LREAL_TO_STRING(z));
ToString := CONCAT(ToString, ')');
]]></ST>
      </Implementation>
    </Method>
    <Property Name="w" Id="{b43d0344-660e-4424-8e2e-47e2501754a5}">
      <Declaration><![CDATA[
PROPERTY w : LREAL
]]></Declaration>
      <Get Name="Get" Id="{86211403-11b6-4e3d-afb2-8cf80e41995e}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
w := 0.0;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="x" Id="{40d86467-830b-482c-80e3-8f3d5363a11c}">
      <Declaration><![CDATA[
PROPERTY x : LREAL
]]></Declaration>
      <Get Name="Get" Id="{e751db80-c7c0-429e-8040-437a4b4d1886}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
x := fx;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{127b5821-add5-4e2c-8134-dbffb110e7ed}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fx := x;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="y" Id="{6e4073a5-323b-45c8-9a86-c86b1ef3eb1a}">
      <Declaration><![CDATA[
PROPERTY y : LREAL
]]></Declaration>
      <Get Name="Get" Id="{3461b6bd-d499-48be-9922-d4c133593c40}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
y := fy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0bec60d4-0399-47cb-8c1c-27ca855d0ea6}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fy := y;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="z" Id="{b91c764e-56e1-417c-9df6-702b8da9d82c}">
      <Declaration><![CDATA[
PROPERTY z : LREAL
]]></Declaration>
      <Get Name="Get" Id="{cf3ecd2a-363b-4576-a777-3c9ab64e61d2}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
z := fz;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{eacf604f-8514-4bc0-a73c-42cfbd5fc4e4}">
        <Declaration><![CDATA[

]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fz := z;
]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>